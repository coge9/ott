package com.nbcuni.test.cms.tests.backend.concerto.chiller.publishing.contenttype.video;

import com.nbcuni.test.cms.backend.tvecms.RokuBackEndLayer;
import com.nbcuni.test.cms.backend.tvecms.pages.content.ContentPage;
import com.nbcuni.test.cms.bussinesobjects.chiller.contenttype.video.GlobalVideoEntity;
import com.nbcuni.test.cms.core.BaseAuthFlowTest;
import com.nbcuni.test.cms.pageobjectutils.tve.ContentType;
import com.nbcuni.test.cms.tests.backend.tvecms.StaticBrandsProvider;
import com.nbcuni.test.cms.utils.jsonparsing.chiller.parser.contenttype.video.VideoJson;
import com.nbcuni.test.cms.utils.jsonparsing.tvecms.parser.publishingcontenttypes.ConcertoApiPublishingTypes;
import com.nbcuni.test.cms.utils.transformers.VideoJsonTransformer;
import com.nbcuni.test.cms.verification.chiller.VideoVerificator;
import com.nbcuni.test.webdriver.Utilities;
import org.testng.annotations.Test;

/**
 * Created by alekca on 27.05.2016.
 */
public class TC14685_PublishVideoByMpxUpdater extends BaseAuthFlowTest {

    /**
     * Pre-Conditions:
     * There is a created Video content type
     * Steps:
     * 1. Go To CMS as Editor
     * Verify: The Editor panel is present
     * <p>
     * 2.Go to Content  and select Video from pre-condition
     * Verify: The Edit Video Page is present
     * <p>
     * 3. Update all the fields per all sections and save
     * Verify: All fields are updated with new values
     * <p>
     * 4.Go To MPX Updater Page and Ingest video from pre-condition by MpxID
     * Verify: TheAsset is updated succesfully
     * The API Go To MPXlog present 'success' status message of POST request
     * <p>
     * 5.Analize POST request for Video
     * Verify: The JSON scheme of Video looks like below with all updated values:
     * http://private-e3bfd-concertoapiingestmaster.apiary-mock.com/video
     * scheme  - http://private-e3bfd-concertoapiingestmaster.apiary-mock.com/json+schema/video
     * <p>
     * 6.Make sure that for
     * Verify: Video uuid present value from devel page of uuid field and generated by Registry service
     * Tags uuid, generated by contrib module
     * Images (of Promotion and Media fields) uuid, generated by contrib module
     * <p>
     * The UUID for Video, Tags and Images are present propper thier values at the devel Page
     */

    private ContentPage contentPage;
    private GlobalVideoEntity video;


    @Test(groups = {"video_publishing", "regression"}, dataProviderClass = StaticBrandsProvider.class, dataProvider = "brandChillerDataProvider", enabled = true)
    public void testIngestedVideoPublishing(String brand) {
        this.brand = brand;
        rokuBackEndLayer = new RokuBackEndLayer(webDriver, brand, aid);
        mainRokuAdminPage = rokuBackEndLayer.openAdminPage();
        //Step 2
        contentPage = mainRokuAdminPage.openPage(ContentPage.class, brand);
        contentPage.searchByType(ContentType.TVE_VIDEO).apply();
        String videoTitle = contentPage.getFullTitleOfFirstElement();
        String mpxId = contentPage.getMPXId(videoTitle);
        //Update by MPX Updater
        rokuBackEndLayer.updateMPXAssetById(mpxId);
        //publishing
        String url = mainRokuAdminPage.getLogURL(brand);
        softAssert.assertTrue(mainRokuAdminPage.isStatusMessageShown(), "The status message is not shown after publishing", "The status message is shown after publishing", webDriver);
        //Step 3
        video = rokuBackEndLayer.getVideo(videoTitle);
        //get expected Json
        VideoJson expectedVideo = VideoJsonTransformer.forConcertoApiChiller(video);
        //Get Actual Post Request
        VideoJson actualVideoJson = requestHelper.getSingleParsedResponse(url, ConcertoApiPublishingTypes.VIDEO);
        softAssert.assertTrue(new VideoVerificator().verify(expectedVideo, actualVideoJson), "The actual data is not matched", "The JSON data is matched", webDriver);
        softAssert.assertAll();
        Utilities.logInfoMessage("Test passed");
    }

}
