package com.nbcuni.test.cms.tests.backend.concerto.chiller.publishing.contenttype.mediagallery;

import com.nbcuni.test.cms.backend.chiller.pages.contenttype.MediaGalleryPage;
import com.nbcuni.test.cms.backend.tvecms.RokuBackEndLayer;
import com.nbcuni.test.cms.bussinesobjects.chiller.contenttype.Content;
import com.nbcuni.test.cms.bussinesobjects.chiller.contenttype.ContentTypeCreationStrategy;
import com.nbcuni.test.cms.bussinesobjects.chiller.contenttype.episode.Episode;
import com.nbcuni.test.cms.bussinesobjects.chiller.contenttype.mediagallery.MediaGallery;
import com.nbcuni.test.cms.bussinesobjects.chiller.contenttype.season.Season;
import com.nbcuni.test.cms.bussinesobjects.chiller.contenttype.series.Series;
import com.nbcuni.test.cms.core.BaseAuthFlowTest;
import com.nbcuni.test.cms.tests.backend.tvecms.StaticBrandsProvider;
import com.nbcuni.test.cms.utils.jsonparsing.chiller.parser.contenttype.mediagallery.MediaGalleryJson;
import com.nbcuni.test.cms.utils.jsonparsing.services.registryservice.RegistryServiceEntity;
import com.nbcuni.test.cms.utils.jsonparsing.services.registryservice.RegistryServiceHelper;
import com.nbcuni.test.cms.utils.jsonparsing.tvecms.parser.publishingcontenttypes.ConcertoApiPublishingTypes;
import com.nbcuni.test.cms.verification.chiller.MediaGalleryVerificator;
import com.nbcuni.test.webdriver.Utilities;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.testng.annotations.AfterMethod;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.Test;

/**
 * Pre-Conditions:
 * There is a created TVE Media Gallery  content type
 * Steps:
 * 1.Go To CMS as Editor
 * Verify: The Editor panel is present
 * <p/>
 * 2.Go to Content  and select TVE Media Gallery from pre-condition
 * Verify: The Edit TVE Media Gallery Page is present
 * <p/>
 * 3.Update all the fields per all sections and save
 * Verify: All fields are updated with new values
 * <p/>
 * 4.Click button 'Publish' and send POST request to the Amazon API
 * Verify: The API log present 'success' status message of POST request
 * <p/>
 * 5.Analize POST request for TVE Media Gallery
 * Verify: The JSON scheme of TVE Media Gallery looks like below with all updated values:
 * http://private-anon-96b5bee80-concertoapiingestmaster.apiary-mock.com/media-gallery
 * scheme  - http://private-anon-96b5bee80-concertoapiingestmaster.apiary-mock.com/json+schema/media-gallery
 * <p/>
 * 6.Make sure that for
 * Verify: TVE Media Gallery uuid present value from devel page of uuid field and generated by Registry service
 * Tags uuid, generated by contrib module
 * Images (of Promotion and Media fields) uuid, generated by contrib module
 * <p/>
 * The UUID for TVE Media Gallery, Tags and Images are present propper thier values at the devel Page
 */

public class TC14692_PublishUpdatedMediaGallery extends BaseAuthFlowTest {
    private Content series;
    private Content season;
    private Content episode;
    private MediaGallery mediaGallery;
    private MediaGallery mediaGalleryOld;
    private RegistryServiceHelper serviceHelper = new RegistryServiceHelper(brand);
    private RegistryServiceEntity serviceEntity;

    @Autowired
    @Qualifier("defaultSeries")
    private ContentTypeCreationStrategy seriesCreationStrategy;

    @Autowired
    @Qualifier("defaultSeason")
    private ContentTypeCreationStrategy seasonCreationStrategy;

    @Autowired
    @Qualifier("defaultEpisode")
    private ContentTypeCreationStrategy episodeCreationStrategy;

    @Autowired
    @Qualifier("defaultMediaGallery")
    private ContentTypeCreationStrategy defaultmediaGalleryCreationStrategy;

    @Autowired
    @Qualifier("fullMediaGallery")
    private ContentTypeCreationStrategy mediaGalleryCreationStrategy;

    @BeforeMethod(alwaysRun = true)
    public void initBusinessObject() {
        series = seriesCreationStrategy.createContentType();
        season = seasonCreationStrategy.createContentType();
        ((Season) season).getSeasonInfo().setProgram(series.getTitle());

        episode = episodeCreationStrategy.createContentType();
        ((Episode) episode).getEpisodeInfo()
                .setParentSeries((Series) series)
                .setParentSeason((Season) season);

        mediaGalleryOld = (MediaGallery) defaultmediaGalleryCreationStrategy.createContentType();
        content = mediaGalleryCreationStrategy.createContentType();
        mediaGallery = (MediaGallery) content;
        mediaGallery.getAssociations().getChannelReferenceAssociations().getChannelReference()
                .setSeries(series.getTitle())
                .setItemType(series.getType().getItemType())
                .setSeason(season.getTitle())
                .setEpisode(episode.getTitle());
    }

    @Test(groups = {"mediagallery_publishing"}, dataProviderClass = StaticBrandsProvider.class, dataProvider = "brandChillerDataProvider", enabled = true)
    public void createdMediaGalleryPublishing(String brand) {

        rokuBackEndLayer = new RokuBackEndLayer(webDriver, brand, aid);
        mainRokuAdminPage = rokuBackEndLayer.openAdminPage();

        //Precondition
        rokuBackEndLayer.createContentType(series);
        rokuBackEndLayer.createContentType(season);
        rokuBackEndLayer.createContentType(episode);

        //Step 1
        MediaGalleryPage editPage = (MediaGalleryPage) rokuBackEndLayer.createContentType(mediaGalleryOld);

        //Step 2
        editPage.publish();

        //Step 3
        // Update mediaGallery
        editPage = (MediaGalleryPage) rokuBackEndLayer.updateContent(mediaGalleryOld, mediaGallery);

        softAssert.assertTrue(editPage.isStatusMessageShown(), "Status message is not presented after saving",
                "Status message is presented after saving", webDriver);

        //setMediaImages
        mediaGallery.setMediaImages(editPage.onMediaTab().onMediaBlock().getMediaImages());

        //setSlug
        mediaGallery.setSlugInfo(editPage.onSlugTab().getSlug());

        //publishing
        editPage.publish();
        String url = editPage.getLogURL(brand);
        softAssert.assertTrue(editPage.isStatusMessageShown(), "The status message is not shown after publishing", "The status message is shown after publishing", webDriver);

        //set Media Gallery uuid
        mediaGallery = (MediaGallery) rokuBackEndLayer.updateContentByUuid(mediaGallery);

        //Sett UUID channel references
        rokuBackEndLayer.updateChannelReferenceByUuid(mediaGallery, season, series, episode);
        //get expected Json
        MediaGalleryJson expectedVideo = new MediaGalleryJson(mediaGallery);

        //Get Actual Post Request
        MediaGalleryJson actualVideoJson = requestHelper.getSingleParsedResponse(url, ConcertoApiPublishingTypes.MEDIA_GALLERY);
        softAssert.assertTrue(new MediaGalleryVerificator().verify(expectedVideo, actualVideoJson), "The actual data is not matched", "The JSON data is matched", webDriver);
        softAssert.assertAll();
        Utilities.logInfoMessage("Test passed");
    }

    @AfterMethod(alwaysRun = true)
    public void deleteGalleryTC14673() {
        try {
            rokuBackEndLayer.deleteContentType(season);
            rokuBackEndLayer.deleteContentType(series);
            rokuBackEndLayer.deleteContentType(episode);
            rokuBackEndLayer.deleteContentType(mediaGallery);
        } catch (Throwable e) {
            Utilities.logSevereMessage(Utilities.convertStackTraceToString(e));
        }
    }
}
